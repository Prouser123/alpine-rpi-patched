#!/bin/sh

# FIXME: Step 7 regression from old runner: FQDN always fails to resolve and falls back to default.

# annoying: gotta install coreutils (using a tar.gz here with the bare minimum for it to boot)

tar -xvf /media/mmcblk0p1/apks/extra-fs/coreutils.fs.tar.gz -C /

# uwu fancy
esc=$(printf '\033')

logr() {
	# stdbuf -o0 "$@" | sed "s/^/setup: /"
	# Removed "${esc}[1;33m" from end (to keep output normal colors)
	stdbuf -o0 "$@" | sed "s/^/${esc}[1;36m *${esc}[0m jcx-boot (${esc}[1;33msetup${esc}[0m): /"
}

swarn "Running first boot setup..."

yesno $JCX_VERBOSE && sbegin "(verbose): Enabling command echoing" && set -x

# Step 0: Raspberry Pis don't have a hardware clock!
sbegin "Fixing clock"
rc-update add swclock boot    # enable the software clock
rc-update del hwclock boot    # disable the hardware clock

# setup-alpine excerps ahead!

# Step 1: Setup keymap + hostname
sbegin "Setting up keymap, hostname"
# No point for the lxc checks since we're on RPi
setup-keymap gb gb
setup-hostname alpine

# Step 2: Setup interfaces (dhcp ethernet for now)
sbegin "Setting up interfaces"
echo "auto lo
iface lo inet loopback

auto eth0
iface eth0 inet dhcp
	udhcpc_opts -t 5 -T 10 -b -S
	# Setting options to hopefully increase our chances
	# of getting a lease before being forked to the background
	#
	# -t 5 | 5 initial retries
	# -T 10 | wait 10s between packets
	# -b | run in background if not obtained
	# -S | enable syslog logging (/var/log/messages)
	hostname alpine
" | setup-interfaces -i

# Step 3: Setup networking
sbegin "Setting up networking"
# /etc/init.d/networking --quiet start >/dev/null
logr /etc/init.d/networking start

# Step 3.1: Setup DNS if dhcp was not configured
grep '^iface.*dhcp' $ROOT/etc/network/interfaces > /dev/null ||\
	# setup-dns -d (this is setup-dns without the search domain part)
    mkdir -p /etc/ && echo "nameserver 1.1.1.1" > /etc/resolv.conf

# Step 4: Set Root Pasword (Skipped)

# Step 5: Setup Timezone
sbegin "Setting up timezone (Europe/London)"
# In this case we'll use Europe/London
setup-timezone -z Europe/London

# Step 6: Enable Services
sbegin "Setting up services"
rc-update --quiet add networking boot
rc-update --quiet add urandom boot
for svc in acpid cron crond; do
	if rc-service --exists $svc; then
		rc-update --quiet add $svc
	fi
done

# Step 6.1: Enable our new hostname
sbegin "Restarting hostname"
/etc/init.d/hostname --quiet restart

# Step 6.2: Start up the services
sbegin "Starting boot and default services"
logr openrc boot
logr openrc default

# Step 7-pre: Define get_fdqn
# Extract fully qualified domain name from current hostname. If none is
# currently set, use 'my.domain'.
get_fqdn() {
	local _dn
	_dn=$(hostname -f 2>/dev/null)
	_dn=${_dn#$(hostname -s 2>/dev/null)}
	_dn=${_dn#.}
	echo "${_dn:=my.domain}"
}

# Step 7: Update /etc/hosts
sbegin "Updating /etc/hosts"
# update /etc/hosts - after we have got dhcp address
# Get default fully qualified domain name from *first* domain
# given on *last* search or domain statement.
_dn=$(sed -n \
-e '/^domain[[:space:]][[:space:]]*/{s///;s/\([^[:space:]]*\).*$/\1/;h;}' \
-e '/^search[[:space:]][[:space:]]*/{s///;s/\([^[:space:]]*\).*$/\1/;h;}' \
-e '${g;p;}' /etc/resolv.conf 2>/dev/null)

_hn=$(hostname)
_hn=${_hn%%.*}

sed -i -e "s/^127\.0\.0\.1.*/127.0.0.1\t${_hn}.${_dn:-$(get_fqdn)} ${_hn} localhost.localdomain localhost/" /etc/hosts

# Step 8: Setup Proxy (Skipped)

# Step 9: Setup NTP
sbegin "Setting up NTP"
# We don't bother with the pre-req checks here
logr setup-ntp -c chrony

# Step 9.1: Grab NTP data (Jump to current time)
sbegin "Grabbing NTP date"
#echo $(set -x && chronyc makestep)
# load trackr
.  /jcx/services/boot/trackr.sh

# Step 10-pre: Define get_alpine_release
get_alpine_release() {
	local version=$(cat "${ROOT}"etc/alpine-release 2>/dev/null)
	case "$version" in
		*_git*|*_alpha*) release="edge";;
		[0-9]*.[0-9]*.[0-9]*)
			# release in x.y.z format, cut last digit
			release=v${version%.[0-9]*};;
		*)	# fallback to edge
			release="edge";;
	esac
}

# Step 10: Setup APK Repo Options
sbegin "Setting up apk repos"
# Here we use a custom script instead
get_alpine_release
mirror="https://alpine-cf-cdn.jcx.ovh/alpine/"
echo "${mirror%/}/${release}/main" >> /etc/apk/repositories
echo "${mirror%/}/${release}/community" >> /etc/apk/repositories

# Step 11: Setup SSHd (SSH Server)
sbegin "Setting up sshd"
logr setup-sshd -c openssh

# Step 11.1: Enable password and root login
sbegin "Configuring sshd"
echo -e "PasswordAuthentication yes\nPermitRootLogin yes\nPermitEmptyPasswords yes\nDenyUsers guest" > /etc/ssh/sshd_config

# Step 11.2: Restart SSHd to start using our new config
sbegin "Restarting sshd"
rc-service sshd restart --quiet

# (Skipped setup-xen-dom0)

# Step 12: Disk Stuffs (not implemented)

# Step 13: Upgrade everything
sbegin "Upgrading system"

logr apk update
logr apk upgrade

# Cleaning up
sbegin "Cleaning up"
# Touch the firstboot check file
mkdir -p /jcx/checks
touch /jcx/checks/firstboot

# We don't "exit 0" here as we source this file in runner.

#if [ "$EINFO_VERBOSE" = true]; then set +x; fi
yesno $JCX_VERBOSE && sbegin "(verbose): Disabling command echoing" && set +x